DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS relationship CASCADE;
DROP TABLE IF EXISTS films CASCADE;
DROP TABLE IF EXISTS likes CASCADE;
DROP TABLE IF EXISTS film_genre CASCADE;
DROP TABLE IF EXISTS mpa CASCADE;

create table IF NOT EXISTS users
(
    user_id  int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    VARCHAR NOT NULL,
    login    VARCHAR NOT NULL,
    name     VARCHAR,
    birthday DATE
);

CREATE TABLE IF NOT EXISTS relationship (
	user_id int NOT NULL,
	friend_id int NOT NULL,
	CONSTRAINT pk_friends PRIMARY KEY (user_id, friend_id),
	CONSTRAINT fk_friends1 FOREIGN KEY (user_id) REFERENCES users(user_id),
	CONSTRAINT fk_friends2 FOREIGN KEY (friend_id) REFERENCES users(user_id)
);

CREATE TABLE IF NOT EXISTS mpa
(
	mpa_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	mpa_name varchar NOT NULL
);

create table IF NOT EXISTS films
(
	film_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name varchar NOT NULL,
	description varchar(200),
	release_date DATE,
	duration int CHECK (duration > 0),
	mpa_id int REFERENCES mpa(mpa_id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS likes
(
	film_id int REFERENCES films(film_id) ON DELETE CASCADE,
	user_id int REFERENCES users(user_id) ON DELETE CASCADE,
	PRIMARY KEY (user_id, film_id)
);

CREATE TABLE IF NOT EXISTS genre
(
	genre_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	genre_name varchar NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS film_genre
(
	film_id int REFERENCES films(film_id) ON DELETE CASCADE,
	genre_id int REFERENCES genre(genre_id) ON DELETE CASCADE
);